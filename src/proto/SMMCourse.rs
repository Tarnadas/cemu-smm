// This file is generated by rust-protobuf 3.0.0-pre. Do not edit
// .proto file is parsed by protobuf-codegen-pure=3.0.0-pre
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `SMMCourse.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_0_0_PRE;

#[derive(PartialEq,Clone,Default)]
#[derive(Serialize, Deserialize)]
pub struct SMMCourse {
    // message fields
    pub modified: u64,
    pub title: ::std::string::String,
    pub maker: ::std::string::String,
    pub game_style: ::protobuf::ProtobufEnumOrUnknown<smmcourse::GameStyle>,
    pub course_theme: ::protobuf::ProtobufEnumOrUnknown<smmcourse::CourseTheme>,
    pub course_theme_sub: ::protobuf::ProtobufEnumOrUnknown<smmcourse::CourseTheme>,
    pub time: u32,
    pub auto_scroll: ::protobuf::ProtobufEnumOrUnknown<smmcourse::AutoScroll>,
    pub auto_scroll_sub: ::protobuf::ProtobufEnumOrUnknown<smmcourse::AutoScroll>,
    pub width: u32,
    pub width_sub: u32,
    pub tiles: ::std::vec::Vec<super::Tile::Tile>,
    pub tiles_sub: ::std::vec::Vec<super::Tile::Tile>,
    pub sounds: ::std::vec::Vec<super::Sound::Sound>,
    pub sounds_sub: ::std::vec::Vec<super::Sound::Sound>,
    pub thumbnail: ::bytes::Bytes,
    pub thumbnail_preview: ::bytes::Bytes,
    // special fields
    #[serde(skip)]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[serde(skip)]
    pub cached_size: ::protobuf::rt::CachedSize,
}

impl<'a> ::std::default::Default for &'a SMMCourse {
    fn default() -> &'a SMMCourse {
        <SMMCourse as ::protobuf::Message>::default_instance()
    }
}

impl SMMCourse {
    pub fn new() -> SMMCourse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::new();
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "modified",
            |m: &SMMCourse| { &m.modified },
            |m: &mut SMMCourse| { &mut m.modified },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "title",
            |m: &SMMCourse| { &m.title },
            |m: &mut SMMCourse| { &mut m.title },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "maker",
            |m: &SMMCourse| { &m.maker },
            |m: &mut SMMCourse| { &mut m.maker },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "game_style",
            |m: &SMMCourse| { &m.game_style },
            |m: &mut SMMCourse| { &mut m.game_style },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "course_theme",
            |m: &SMMCourse| { &m.course_theme },
            |m: &mut SMMCourse| { &mut m.course_theme },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "course_theme_sub",
            |m: &SMMCourse| { &m.course_theme_sub },
            |m: &mut SMMCourse| { &mut m.course_theme_sub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time",
            |m: &SMMCourse| { &m.time },
            |m: &mut SMMCourse| { &mut m.time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auto_scroll",
            |m: &SMMCourse| { &m.auto_scroll },
            |m: &mut SMMCourse| { &mut m.auto_scroll },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "auto_scroll_sub",
            |m: &SMMCourse| { &m.auto_scroll_sub },
            |m: &mut SMMCourse| { &mut m.auto_scroll_sub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &SMMCourse| { &m.width },
            |m: &mut SMMCourse| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width_sub",
            |m: &SMMCourse| { &m.width_sub },
            |m: &mut SMMCourse| { &mut m.width_sub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tiles",
            |m: &SMMCourse| { &m.tiles },
            |m: &mut SMMCourse| { &mut m.tiles },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tiles_sub",
            |m: &SMMCourse| { &m.tiles_sub },
            |m: &mut SMMCourse| { &mut m.tiles_sub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sounds",
            |m: &SMMCourse| { &m.sounds },
            |m: &mut SMMCourse| { &mut m.sounds },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "sounds_sub",
            |m: &SMMCourse| { &m.sounds_sub },
            |m: &mut SMMCourse| { &mut m.sounds_sub },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thumbnail",
            |m: &SMMCourse| { &m.thumbnail },
            |m: &mut SMMCourse| { &mut m.thumbnail },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "thumbnail_preview",
            |m: &SMMCourse| { &m.thumbnail_preview },
            |m: &mut SMMCourse| { &mut m.thumbnail_preview },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SMMCourse>(
            "SMMCourse",
            0,
            fields,
        )
    }
}

impl ::protobuf::Message for SMMCourse {
    fn is_initialized(&self) -> bool {
        for v in &self.tiles {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tiles_sub {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sounds {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sounds_sub {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.modified = is.read_uint64()?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.title = is.read_string()?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.maker = is.read_string()?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.game_style = is.read_enum_or_unknown()?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.course_theme = is.read_enum_or_unknown()?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.course_theme_sub = is.read_enum_or_unknown()?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.time = is.read_uint32()?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auto_scroll = is.read_enum_or_unknown()?;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.auto_scroll_sub = is.read_enum_or_unknown()?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.width = is.read_uint32()?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.width_sub = is.read_uint32()?;
                },
                12 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.tiles)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.tiles_sub)?;
                },
                14 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.sounds)?;
                },
                15 => {
                    ::protobuf::rt::read_repeated_message_into_vec(wire_type, is, &mut self.sounds_sub)?;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail = is.read_carllerche_bytes()?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.thumbnail_preview = is.read_carllerche_bytes()?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.modified != 0 {
            my_size += ::protobuf::rt::value_size(1, self.modified, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.title.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.title);
        }
        if !self.maker.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.maker);
        }
        if self.game_style != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::GameStyle::M1) {
            my_size += ::protobuf::rt::enum_or_unknown_size(4, self.game_style);
        }
        if self.course_theme != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND) {
            my_size += ::protobuf::rt::enum_or_unknown_size(5, self.course_theme);
        }
        if self.course_theme_sub != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND) {
            my_size += ::protobuf::rt::enum_or_unknown_size(6, self.course_theme_sub);
        }
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(7, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.auto_scroll != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED) {
            my_size += ::protobuf::rt::enum_or_unknown_size(8, self.auto_scroll);
        }
        if self.auto_scroll_sub != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED) {
            my_size += ::protobuf::rt::enum_or_unknown_size(9, self.auto_scroll_sub);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(10, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.width_sub != 0 {
            my_size += ::protobuf::rt::value_size(11, self.width_sub, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.tiles {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tiles_sub {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sounds {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.sounds_sub {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.thumbnail.is_empty() {
            my_size += ::protobuf::rt::bytes_size(16, &self.thumbnail);
        }
        if !self.thumbnail_preview.is_empty() {
            my_size += ::protobuf::rt::bytes_size(17, &self.thumbnail_preview);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.modified != 0 {
            os.write_uint64(1, self.modified)?;
        }
        if !self.title.is_empty() {
            os.write_string(2, &self.title)?;
        }
        if !self.maker.is_empty() {
            os.write_string(3, &self.maker)?;
        }
        if self.game_style != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::GameStyle::M1) {
            os.write_enum(4, ::protobuf::ProtobufEnumOrUnknown::value(&self.game_style))?;
        }
        if self.course_theme != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND) {
            os.write_enum(5, ::protobuf::ProtobufEnumOrUnknown::value(&self.course_theme))?;
        }
        if self.course_theme_sub != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND) {
            os.write_enum(6, ::protobuf::ProtobufEnumOrUnknown::value(&self.course_theme_sub))?;
        }
        if self.time != 0 {
            os.write_uint32(7, self.time)?;
        }
        if self.auto_scroll != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED) {
            os.write_enum(8, ::protobuf::ProtobufEnumOrUnknown::value(&self.auto_scroll))?;
        }
        if self.auto_scroll_sub != ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED) {
            os.write_enum(9, ::protobuf::ProtobufEnumOrUnknown::value(&self.auto_scroll_sub))?;
        }
        if self.width != 0 {
            os.write_uint32(10, self.width)?;
        }
        if self.width_sub != 0 {
            os.write_uint32(11, self.width_sub)?;
        }
        for v in &self.tiles {
            ::protobuf::rt::write_message_field_with_cached_size(12, v, os)?;
        };
        for v in &self.tiles_sub {
            ::protobuf::rt::write_message_field_with_cached_size(13, v, os)?;
        };
        for v in &self.sounds {
            ::protobuf::rt::write_message_field_with_cached_size(14, v, os)?;
        };
        for v in &self.sounds_sub {
            ::protobuf::rt::write_message_field_with_cached_size(15, v, os)?;
        };
        if !self.thumbnail.is_empty() {
            os.write_bytes(16, &self.thumbnail)?;
        }
        if !self.thumbnail_preview.is_empty() {
            os.write_bytes(17, &self.thumbnail_preview)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn new() -> SMMCourse {
        SMMCourse::new()
    }

    fn descriptor_static() -> ::protobuf::reflect::MessageDescriptor {
        ::protobuf::reflect::MessageDescriptor::new_generated_2(file_descriptor(), 0)
    }

    fn default_instance() -> &'static SMMCourse {
        static instance: SMMCourse = SMMCourse {
            modified: 0,
            title: ::std::string::String::new(),
            maker: ::std::string::String::new(),
            game_style: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            course_theme: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            course_theme_sub: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            time: 0,
            auto_scroll: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            auto_scroll_sub: ::protobuf::ProtobufEnumOrUnknown::from_i32(0),
            width: 0,
            width_sub: 0,
            tiles: ::std::vec::Vec::new(),
            tiles_sub: ::std::vec::Vec::new(),
            sounds: ::std::vec::Vec::new(),
            sounds_sub: ::std::vec::Vec::new(),
            thumbnail: ::bytes::Bytes::new(),
            thumbnail_preview: ::bytes::Bytes::new(),
            unknown_fields: ::protobuf::UnknownFields::new(),
            cached_size: ::protobuf::rt::CachedSize::new(),
        };
        &instance
    }
}

impl ::protobuf::Clear for SMMCourse {
    fn clear(&mut self) {
        self.modified = 0;
        self.title.clear();
        self.maker.clear();
        self.game_style = ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::GameStyle::M1);
        self.course_theme = ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND);
        self.course_theme_sub = ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::CourseTheme::GROUND);
        self.time = 0;
        self.auto_scroll = ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED);
        self.auto_scroll_sub = ::protobuf::ProtobufEnumOrUnknown::new(smmcourse::AutoScroll::DISABLED);
        self.width = 0;
        self.width_sub = 0;
        self.tiles.clear();
        self.tiles_sub.clear();
        self.sounds.clear();
        self.sounds_sub.clear();
        self.thumbnail.clear();
        self.thumbnail_preview.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SMMCourse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SMMCourse {
    type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SMMCourse`
pub mod smmcourse {
    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    #[derive(Serialize, Deserialize)]
    pub enum GameStyle {
        M1 = 0,
        M3 = 1,
        MW = 2,
        WU = 3,
    }

    impl ::protobuf::ProtobufEnum for GameStyle {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<GameStyle> {
            match value {
                0 => ::std::option::Option::Some(GameStyle::M1),
                1 => ::std::option::Option::Some(GameStyle::M3),
                2 => ::std::option::Option::Some(GameStyle::MW),
                3 => ::std::option::Option::Some(GameStyle::WU),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [GameStyle] = &[
                GameStyle::M1,
                GameStyle::M3,
                GameStyle::MW,
                GameStyle::WU,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 0)
        }
    }

    impl ::std::default::Default for GameStyle {
        fn default() -> Self {
            GameStyle::M1
        }
    }

    impl ::protobuf::reflect::ProtobufValue for GameStyle {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl GameStyle {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<GameStyle>("SMMCourse.GameStyle", 0)
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    #[derive(Serialize, Deserialize)]
    pub enum CourseTheme {
        GROUND = 0,
        UNDERGROUND = 1,
        CASTLE = 2,
        AIRSHIP = 3,
        UNDERWATER = 4,
        GHOUST_HOUSE = 5,
    }

    impl ::protobuf::ProtobufEnum for CourseTheme {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<CourseTheme> {
            match value {
                0 => ::std::option::Option::Some(CourseTheme::GROUND),
                1 => ::std::option::Option::Some(CourseTheme::UNDERGROUND),
                2 => ::std::option::Option::Some(CourseTheme::CASTLE),
                3 => ::std::option::Option::Some(CourseTheme::AIRSHIP),
                4 => ::std::option::Option::Some(CourseTheme::UNDERWATER),
                5 => ::std::option::Option::Some(CourseTheme::GHOUST_HOUSE),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [CourseTheme] = &[
                CourseTheme::GROUND,
                CourseTheme::UNDERGROUND,
                CourseTheme::CASTLE,
                CourseTheme::AIRSHIP,
                CourseTheme::UNDERWATER,
                CourseTheme::GHOUST_HOUSE,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 1)
        }
    }

    impl ::std::default::Default for CourseTheme {
        fn default() -> Self {
            CourseTheme::GROUND
        }
    }

    impl ::protobuf::reflect::ProtobufValue for CourseTheme {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl CourseTheme {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<CourseTheme>("SMMCourse.CourseTheme", 1)
        }
    }

    #[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
    #[derive(Serialize, Deserialize)]
    pub enum AutoScroll {
        DISABLED = 0,
        SLOW = 1,
        MEDIUM = 2,
        FAST = 3,
        LOCK = 4,
    }

    impl ::protobuf::ProtobufEnum for AutoScroll {
        fn value(&self) -> i32 {
            *self as i32
        }

        fn from_i32(value: i32) -> ::std::option::Option<AutoScroll> {
            match value {
                0 => ::std::option::Option::Some(AutoScroll::DISABLED),
                1 => ::std::option::Option::Some(AutoScroll::SLOW),
                2 => ::std::option::Option::Some(AutoScroll::MEDIUM),
                3 => ::std::option::Option::Some(AutoScroll::FAST),
                4 => ::std::option::Option::Some(AutoScroll::LOCK),
                _ => ::std::option::Option::None
            }
        }

        fn values() -> &'static [Self] {
            static values: &'static [AutoScroll] = &[
                AutoScroll::DISABLED,
                AutoScroll::SLOW,
                AutoScroll::MEDIUM,
                AutoScroll::FAST,
                AutoScroll::LOCK,
            ];
            values
        }

        fn enum_descriptor_static() -> ::protobuf::reflect::EnumDescriptor {
            ::protobuf::reflect::EnumDescriptor::new_generated_2(super::file_descriptor(), 2)
        }
    }

    impl ::std::default::Default for AutoScroll {
        fn default() -> Self {
            AutoScroll::DISABLED
        }
    }

    impl ::protobuf::reflect::ProtobufValue for AutoScroll {
        type RuntimeType = ::protobuf::reflect::runtime_types::RuntimeTypeEnum<Self>;
    }

    impl AutoScroll {
        pub(in super) fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
            ::protobuf::reflect::GeneratedEnumDescriptorData::new_2::<AutoScroll>("SMMCourse.AutoScroll", 2)
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fSMMCourse.proto\x12\x05smmdb\x1a\nTile.proto\x1a\x0bSound.proto\"\
    \xee\x07\n\tSMMCourse\x12\x1c\n\x08modified\x18\x01\x20\x01(\x04R\x08mod\
    ifiedB\0\x12\x16\n\x05title\x18\x02\x20\x01(\tR\x05titleB\0\x12\x16\n\
    \x05maker\x18\x03\x20\x01(\tR\x05makerB\0\x12;\n\ngame_style\x18\x04\x20\
    \x01(\x0e2\x1a.smmdb.SMMCourse.GameStyleR\tgameStyleB\0\x12A\n\x0ccourse\
    _theme\x18\x05\x20\x01(\x0e2\x1c.smmdb.SMMCourse.CourseThemeR\x0bcourseT\
    hemeB\0\x12H\n\x10course_theme_sub\x18\x06\x20\x01(\x0e2\x1c.smmdb.SMMCo\
    urse.CourseThemeR\x0ecourseThemeSubB\0\x12\x14\n\x04time\x18\x07\x20\x01\
    (\rR\x04timeB\0\x12>\n\x0bauto_scroll\x18\x08\x20\x01(\x0e2\x1b.smmdb.SM\
    MCourse.AutoScrollR\nautoScrollB\0\x12E\n\x0fauto_scroll_sub\x18\t\x20\
    \x01(\x0e2\x1b.smmdb.SMMCourse.AutoScrollR\rautoScrollSubB\0\x12\x16\n\
    \x05width\x18\n\x20\x01(\rR\x05widthB\0\x12\x1d\n\twidth_sub\x18\x0b\x20\
    \x01(\rR\x08widthSubB\0\x12#\n\x05tiles\x18\x0c\x20\x03(\x0b2\x0b.smmdb.\
    TileR\x05tilesB\0\x12*\n\ttiles_sub\x18\r\x20\x03(\x0b2\x0b.smmdb.TileR\
    \x08tilesSubB\0\x12&\n\x06sounds\x18\x0e\x20\x03(\x0b2\x0c.smmdb.SoundR\
    \x06soundsB\0\x12-\n\nsounds_sub\x18\x0f\x20\x03(\x0b2\x0c.smmdb.SoundR\
    \tsoundsSubB\0\x12\x1e\n\tthumbnail\x18\x10\x20\x01(\x0cR\tthumbnailB\0\
    \x12-\n\x11thumbnail_preview\x18\x11\x20\x01(\x0cR\x10thumbnailPreviewB\
    \0\"5\n\tGameStyle\x12\x08\n\x02M1\x10\0\x1a\0\x12\x08\n\x02M3\x10\x01\
    \x1a\0\x12\x08\n\x02MW\x10\x02\x1a\0\x12\x08\n\x02WU\x10\x03\x1a\0\x1a\0\
    \"s\n\x0bCourseTheme\x12\x0c\n\x06GROUND\x10\0\x1a\0\x12\x11\n\x0bUNDERG\
    ROUND\x10\x01\x1a\0\x12\x0c\n\x06CASTLE\x10\x02\x1a\0\x12\r\n\x07AIRSHIP\
    \x10\x03\x1a\0\x12\x10\n\nUNDERWATER\x10\x04\x1a\0\x12\x12\n\x0cGHOUST_H\
    OUSE\x10\x05\x1a\0\x1a\0\"P\n\nAutoScroll\x12\x0e\n\x08DISABLED\x10\0\
    \x1a\0\x12\n\n\x04SLOW\x10\x01\x1a\0\x12\x0c\n\x06MEDIUM\x10\x02\x1a\0\
    \x12\n\n\x04FAST\x10\x03\x1a\0\x12\n\n\x04LOCK\x10\x04\x1a\0\x1a\0:\0B\0\
    b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> ::protobuf::reflect::FileDescriptor {
    static file_descriptor_lazy: ::protobuf::rt::LazyV2<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::LazyV2::INIT;
    let file_descriptor = file_descriptor_lazy.get(|| {
        let mut deps = ::std::vec::Vec::new();
        deps.push(super::Tile::file_descriptor());
        deps.push(super::Sound::file_descriptor());
        let mut messages = ::std::vec::Vec::new();
        messages.push(SMMCourse::generated_message_descriptor_data());
        let mut enums = ::std::vec::Vec::new();
        enums.push(smmcourse::GameStyle::generated_enum_descriptor_data());
        enums.push(smmcourse::CourseTheme::generated_enum_descriptor_data());
        enums.push(smmcourse::AutoScroll::generated_enum_descriptor_data());
        ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
            file_descriptor_proto(),
            deps,
            messages,
            enums,
        )
    });
    ::protobuf::reflect::FileDescriptor::new_generated_2(file_descriptor)
}
